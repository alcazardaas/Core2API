// <auto-generated />
using System;
using CRUD_Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRUD_Server.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180826041028_Aded ueracount")]
    partial class Adedueracount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CRUD_Server.Models.BankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountClientNumber");

                    b.Property<string>("AccountNumber");

                    b.Property<bool>("AccountStatus");

                    b.Property<string>("AccountType");

                    b.Property<float>("Balance");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Currency");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("CRUD_Server.Models.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1");

                    b.Property<string>("City");

                    b.Property<int>("ClientId");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateOfRegistration");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<string>("LastName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("CRUD_Server.Models.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount");

                    b.Property<long>("BankAccountId");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("MyProperty");

                    b.Property<bool>("PaymentStatus");

                    b.Property<string>("PaymentType");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CRUD_Server.Models.Transfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Amount");

                    b.Property<long>("BankAccountId");

                    b.Property<string>("Description");

                    b.Property<long?>("DestBankAccountId");

                    b.Property<DateTime>("TransactionDate");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("DestBankAccountId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("CRUD_Server.Models.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId");

                    b.Property<long>("ClientId1");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.HasIndex("ClientId1");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("CRUD_Server.Models.BankAccount", b =>
                {
                    b.HasOne("CRUD_Server.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRUD_Server.Models.Payment", b =>
                {
                    b.HasOne("CRUD_Server.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CRUD_Server.Models.Transfer", b =>
                {
                    b.HasOne("CRUD_Server.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CRUD_Server.Models.BankAccount", "DestBankAccount")
                        .WithMany()
                        .HasForeignKey("DestBankAccountId");
                });

            modelBuilder.Entity("CRUD_Server.Models.UserAccount", b =>
                {
                    b.HasOne("CRUD_Server.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId1")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
